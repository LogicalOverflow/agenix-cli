
# This file was @generated by crate2nix 0.9.0 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? if buildRustCrate != null
    then lib.warn "`buildRustCrate` is deprecated, use `buildRustCrateForPkgs` instead" (_: buildRustCrate)
    else pkgs: pkgs.buildRustCrate
  # Deprecated
, buildRustCrate ? null
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "agenix";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "agenix" = rec {
      packageId = "agenix";
      build = internal.buildRustCrateWithFeatures {
        packageId = "agenix";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "Inflector" = rec {
        crateName = "Inflector";
        version = "0.11.4";
        edition = "2015";
        sha256 = "1lqmcni21ifzyq41fhz6k1j2b23cmsx469s4g4sf01l78miqqhzy";
        libName = "inflector";
        authors = [
          "Josh Teeter<joshteeter@gmail.com>"
        ];
        features = {
          "default" = [ "heavyweight" ];
          "heavyweight" = [ "regex" "lazy_static" ];
        };
      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.14.1";
        edition = "2015";
        sha256 = "1xs5bsi40zpyxbbylyaysya5h36ykcbg91i82415sxw5wk7q4px5";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
          "Jon Gjengset <jon@thesquareplanet.com>"
          "Noah Bergbauer <noah.bergbauer@tum.de>"
        ];
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "default" = [ "rustc-demangle" "cpp_demangle" "std-object" "fallible-iterator" "smallvec" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "std" = [ "gimli/std" ];
          "std-object" = [ "std" "object" "object/std" "object/compression" "gimli/endian-reader" ];
        };
      };
      "adler" = rec {
        crateName = "adler";
        version = "0.2.3";
        edition = "2015";
        sha256 = "0zpdsrfq5bd34941gmrlamnzjfbsx0x586afb7b0jqhr8g1lwapf";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aead" = rec {
        crateName = "aead";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0c8388alvivcj4qkxgh4s4l6fbczn3p8wc0pnar6crlfvcdmvjbz";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "aes" = rec {
        crateName = "aes";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0q85mw70mgr4glza9y9lrs9nxfa1cdcqzfk6wx0smb3623pr2hw8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aes-soft";
            packageId = "aes-soft";
            target = { target, features }: (!((builtins.elem "aes" targetFeatures) && (builtins.elem "sse2" targetFeatures) && ((target."arch" == "x86_64") || (target."arch" == "x86"))));
          }
          {
            name = "aesni";
            packageId = "aesni";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "aes" targetFeatures) && (builtins.elem "sse2" targetFeatures) && ((target."arch" == "x86_64") || (target."arch" == "x86")));
          }
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            features = [ "dev" ];
          }
        ];

      };
      "aes-ctr" = rec {
        crateName = "aes-ctr";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0qspjxzrclnb83501595y01dhc0km1ssrbjnwlxhcrsdwp6w6abp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aes-soft";
            packageId = "aes-soft";
            target = { target, features }: (!((builtins.elem "aes" targetFeatures) && (builtins.elem "sse2" targetFeatures) && (builtins.elem "ssse3" targetFeatures) && ((target."arch" == "x86_64") || (target."arch" == "x86"))));
          }
          {
            name = "aesni";
            packageId = "aesni";
            target = { target, features }: ((builtins.elem "aes" targetFeatures) && (builtins.elem "sse2" targetFeatures) && (builtins.elem "ssse3" targetFeatures) && ((target."arch" == "x86_64") || (target."arch" == "x86")));
          }
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
          {
            name = "ctr";
            packageId = "ctr";
            target = { target, features }: (!((builtins.elem "aes" targetFeatures) && (builtins.elem "sse2" targetFeatures) && (builtins.elem "ssse3" targetFeatures) && ((target."arch" == "x86_64") || (target."arch" == "x86"))));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            features = [ "dev" ];
          }
        ];

      };
      "aes-soft" = rec {
        crateName = "aes-soft";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0wj0fi2pvmlw09yvb1aqf0mfkzrfxmjsf90finijh255ir4wf55y";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            features = [ "dev" ];
          }
        ];
        features = {
        };
      };
      "aesni" = rec {
        crateName = "aesni";
        version = "0.10.0";
        edition = "2018";
        sha256 = "1kmh07fp9hbi1aa8dr2rybbgw8vqz6hjmk34c4w7sbscx7si2bpa";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "ctr" ];
        };
        resolvedDefaultFeatures = [ "ctr" "default" ];
      };
      "age" = rec {
        crateName = "age";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0n5d0i86l3zz3nv371x6fza8g4ryfibb3ln3sw7vqh7gqdcqbmhn";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "aes-ctr";
            packageId = "aes-ctr";
            optional = true;
          }
          {
            name = "age-core";
            packageId = "age-core";
          }
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bcrypt-pbkdf";
            packageId = "bcrypt-pbkdf";
            optional = true;
          }
          {
            name = "bech32";
            packageId = "bech32";
          }
          {
            name = "block-modes";
            packageId = "block-modes";
            optional = true;
          }
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
          }
          {
            name = "chacha20poly1305";
            packageId = "chacha20poly1305";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "console";
            packageId = "console";
            optional = true;
          }
          {
            name = "cookie-factory";
            packageId = "cookie-factory";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            optional = true;
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "i18n-embed";
            packageId = "i18n-embed";
            features = [ "fluent-system" ];
          }
          {
            name = "i18n-embed-fl";
            packageId = "i18n-embed-fl";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "pinentry";
            packageId = "pinentry";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "rpassword";
            packageId = "rpassword";
            optional = true;
          }
          {
            name = "rsa";
            packageId = "rsa";
            optional = true;
          }
          {
            name = "rust-embed";
            packageId = "rust-embed";
          }
          {
            name = "scrypt";
            packageId = "scrypt";
            usesDefaultFeatures = false;
          }
          {
            name = "secrecy";
            packageId = "secrecy";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "x25519-dalek";
            packageId = "x25519-dalek";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "async" = [ "futures" ];
          "cli-common" = [ "console" "pinentry" "rpassword" ];
          "plugin" = [ "age-core/plugin" "which" "wsl" ];
          "ssh" = [ "aes" "aes-ctr" "bcrypt-pbkdf" "block-modes" "curve25519-dalek" "num-traits" "rsa" ];
          "unstable" = [ "age-core/unstable" ];
        };
        resolvedDefaultFeatures = [ "aes" "aes-ctr" "armor" "bcrypt-pbkdf" "block-modes" "cli-common" "console" "curve25519-dalek" "num-traits" "pinentry" "rpassword" "rsa" "ssh" ];
      };
      "age-core" = rec {
        crateName = "age-core";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0dmccyxzi7zgmi80f9z1jygx93i173d0v9gm2ply4kc04m1zqrdd";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "c2-chacha";
            packageId = "c2-chacha";
          }
          {
            name = "chacha20poly1305";
            packageId = "chacha20poly1305";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "cookie-factory";
            packageId = "cookie-factory";
          }
          {
            name = "hkdf";
            packageId = "hkdf";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "secrecy";
            packageId = "secrecy";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
        ];
        features = {
          "plugin" = [ "tempfile" ];
        };
      };
      "agenix" = rec {
        crateName = "agenix";
        version = "0.1.0";
        edition = "2018";
        crateBin = [
          { name = "agenix"; path = "src/main.rs"; }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./.; };
        authors = [
          "Cole Helbling <cole.e.helbling@outlook.com>"
        ];
        dependencies = [
          {
            name = "age";
            packageId = "age";
            usesDefaultFeatures = false;
            features = [ "cli-common" "ssh" "armor" ];
          }
          {
            name = "clap";
            packageId = "clap";
            usesDefaultFeatures = false;
            features = [ "std" "cargo" "derive" ];
          }
          {
            name = "color-eyre";
            packageId = "color-eyre";
            usesDefaultFeatures = false;
            features = [ "track-caller" ];
          }
          {
            name = "env_logger";
            packageId = "env_logger";
            usesDefaultFeatures = false;
            features = [ "termcolor" "atty" ];
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml";
            packageId = "toml";
          }
        ];

      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (target."os" == "hermit");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];

      };
      "autocfg 0.1.7" = rec {
        crateName = "autocfg";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1chwgimpx5z7xbag7krr9d8asxfqbh683qhgl9kn3hxk2l0djj8x";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "autocfg 1.0.1" = rec {
        crateName = "autocfg";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0jj6i9zn4gjl03kjvziqdji6rwx8ykz8zk2ngpc331z2g3fk3c6d";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.56";
        edition = "2018";
        sha256 = "1g716jmrik0fx29va3js4gw8hwk5jlsmvqaa9ryp1c9qyh07c4cx";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "object";
            packageId = "object";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "read_core" "elf" "macho" "pe" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
        ];
        features = {
          "default" = [ "std" "gimli-symbolize" ];
          "gimli-symbolize" = [ "addr2line" "miniz_oxide" "object" ];
          "libbacktrace" = [ "backtrace-sys/backtrace-sys" ];
          "serialize-rustc" = [ "rustc-serialize" ];
          "serialize-serde" = [ "serde" ];
          "verify-winapi" = [ "winapi/dbghelp" "winapi/handleapi" "winapi/libloaderapi" "winapi/memoryapi" "winapi/minwindef" "winapi/processthreadsapi" "winapi/synchapi" "winapi/tlhelp32" "winapi/winbase" "winapi/winnt" ];
        };
        resolvedDefaultFeatures = [ "addr2line" "default" "gimli-symbolize" "miniz_oxide" "object" "std" ];
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.13.0";
        edition = "2018";
        sha256 = "1z82g23mbzjgijkpcrilc7nljpxpvpf7zxf6iyiapkgka2ngwkch";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bcrypt-pbkdf" = rec {
        crateName = "bcrypt-pbkdf";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1fa1xw5c06rdmvh7wycq8ff25ci6j3j1bcyvwnk87cgyhy71nqhj";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "blowfish";
            packageId = "blowfish";
            features = [ "bcrypt" ];
          }
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bech32" = rec {
        crateName = "bech32";
        version = "0.8.0";
        edition = "2015";
        sha256 = "1m436w6iaxsgbafzprxbcp57kyaf9zy0vxk0p5f5wvr5pjb70zvc";
        authors = [
          "Clark Moody"
        ];
        features = {
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "1.2.1";
        edition = "2015";
        sha256 = "14qnd5nq8p2almk79m4m8ydqhd413yaxsyjp5xd19g3mikzf47fg";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitvec" = rec {
        crateName = "bitvec";
        version = "0.19.4";
        edition = "2018";
        sha256 = "10bz751jbsy8fj203ibjwil07p2fwfzvx7b326wfssaravlkbfm7";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "funty";
            packageId = "funty";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "wyz/alloc" ];
          "default" = [ "atomic" "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-modes" = rec {
        crateName = "block-modes";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1w3jc3n7k4xq98b9mfina4wwpg1fq1s3b0mm5whqialb7q3yi82p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-padding";
            packageId = "block-padding";
          }
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "block-padding" = rec {
        crateName = "block-padding";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1bickjlmfw9iv63dp781n589rfybw879mik1va59833m1hvnqscd";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "blowfish" = rec {
        crateName = "blowfish";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1ax736islxcbghc2lqq4vy7zn6qdigrls71lwg11m3743pyg6gzy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "cipher";
            packageId = "cipher 0.3.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.3.0";
            features = [ "dev" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "bcrypt" ];
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.4.2";
        edition = "2018";
        sha256 = "0srh0h0594jmsnbvm7n0g8xabhla8lwb3gn8s0fzd7d1snix2i5f";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "c2-chacha" = rec {
        crateName = "c2-chacha";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1dhslf1998ycc8hbbbfrkngsiypxr100jrwk1113zid703x86szv";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            optional = true;
          }
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            rename = "ppv-lite86";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "rustcrypto_api" ];
          "no_simd" = [ "ppv-lite86/no_simd" ];
          "rustcrypto_api" = [ "cipher" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "cipher" "default" "rustcrypto_api" "std" ];
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "chacha20poly1305" = rec {
        crateName = "chacha20poly1305";
        version = "0.7.1";
        edition = "2018";
        sha256 = "13laqlafkdv60f1pj3ii3rk093x9y9v78cbcpxj03i4hdn7c27xg";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
          {
            name = "poly1305";
            packageId = "poly1305";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "aead/alloc" ];
          "default" = [ "alloc" "chacha20" "xchacha20poly1305" ];
          "heapless" = [ "aead/heapless" ];
          "reduced-round" = [ "chacha20" ];
          "std" = [ "aead/std" "alloc" ];
          "xchacha20poly1305" = [ "chacha20/xchacha20" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.19";
        edition = "2015";
        sha256 = "0wyfl6c00vhfl562spnfcna3zkw8jqvcp652m9iskhl8j26dc2k7";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
          "Brandon W Maister <quodlibetor@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [ "std" "minwinbase" "minwindef" "timezoneapi" ];
          }
        ];
        features = {
          "clock" = [ "libc" "std" "winapi" ];
          "default" = [ "clock" "std" "oldtime" ];
          "oldtime" = [ "time" ];
          "unstable-locales" = [ "pure-rust-locales" "alloc" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "clock" "default" "libc" "oldtime" "std" "time" "winapi" ];
      };
      "cipher 0.2.5" = rec {
        crateName = "cipher";
        version = "0.2.5";
        edition = "2018";
        sha256 = "00b8imbmdg7zdrbaczlivmdfdy09xldg95wl4iijl15xgjcfgy0j";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "cipher 0.3.0" = rec {
        crateName = "cipher";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1dyzsv0c84rgz98d5glnhsz4320wl24x3bq511vnyf0mxir21rby";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "clap" = rec {
        crateName = "clap";
        version = "3.0.0-beta.2";
        edition = "2018";
        sha256 = "0hm1kivw6190rxbfqhdr4hqwlrijvwh90i3d9dyyw0d5k0chdlab";
        authors = [
          "Kevin K. <kbknapp@gmail.com>"
          "Clap Maintainers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "os_str_bytes";
            packageId = "os_str_bytes";
            features = [ "raw" ];
          }
          {
            name = "textwrap";
            packageId = "textwrap";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
          }
        ];
        devDependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "cargo" = [ "lazy_static" ];
          "color" = [ "atty" "termcolor" ];
          "debug" = [ "clap_derive/debug" ];
          "default" = [ "suggestions" "color" "derive" "std" "cargo" ];
          "derive" = [ "clap_derive" "lazy_static" ];
          "doc" = [ "yaml" "regex" ];
          "suggestions" = [ "strsim" ];
          "unstable" = [ "clap_derive/unstable" ];
          "wrap_help" = [ "terminal_size" "textwrap/terminal_size" ];
          "yaml" = [ "yaml-rust" ];
        };
        resolvedDefaultFeatures = [ "cargo" "clap_derive" "derive" "lazy_static" "std" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "3.0.0-beta.2";
        edition = "2018";
        sha256 = "18cn82jhcha7m0nkpi1a03jx8k7aaq5kxfcxnsqpaa8ih5dp23rp";
        procMacro = true;
        authors = [
          "Guillaume Pinot <texitoi@texitoi.eu>"
          "Clap Maintainers"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "color-eyre" = rec {
        crateName = "color-eyre";
        version = "0.5.10";
        edition = "2018";
        sha256 = "0p1cavn5wvz4ikq6nffiv11phjjv1mwrgx4flbj7d0zxfl406abv";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            features = [ "gimli-symbolize" ];
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "indenter";
            packageId = "indenter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "owo-colors";
            packageId = "owo-colors";
          }
        ];
        features = {
          "capture-spantrace" = [ "tracing-error" "color-spantrace" ];
          "default" = [ "track-caller" "capture-spantrace" ];
          "issue-url" = [ "url" ];
        };
        resolvedDefaultFeatures = [ "track-caller" ];
      };
      "console" = rec {
        crateName = "console";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1ajnr0rga4vya0fza12ighf3ffkm86w1rv8p5wf443s8nd30kj3w";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "terminal_size";
            packageId = "terminal_size";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winbase" "winuser" "consoleapi" "processenv" "wincon" ];
          }
        ];
        features = {
          "ansi-parsing" = [ "regex" ];
          "default" = [ "unicode-width" "ansi-parsing" ];
          "windows-console-colors" = [ "ansi-parsing" "winapi-util" ];
        };
        resolvedDefaultFeatures = [ "ansi-parsing" "default" "regex" "unicode-width" ];
      };
      "cookie-factory" = rec {
        crateName = "cookie-factory";
        version = "0.3.2";
        edition = "2018";
        sha256 = "0sqjmw85ckqhppff6gjwmvjpkii35441a51xx7cv0ih3jy2fjv9r";
        authors = [
          "Geoffroy Couprie <geo.couprie@gmail.com>"
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cpuid-bool 0.1.2" = rec {
        crateName = "cpuid-bool";
        version = "0.1.2";
        edition = "2018";
        sha256 = "0d16n378jl0n2dslspqxgsiw9frmjirdszhj5gfccgd0548wmswa";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "cpuid-bool 0.2.0" = rec {
        crateName = "cpuid-bool";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1fpzag3g655p1lr08jgf5n89snjc2ycqx30mm0w3irc9fc3mvcnw";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "crypto-mac" = rec {
        crateName = "crypto-mac";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0ghh3qmjf7hv580zqdk4yrbg99v57jx773zb7lzi7j4hj24bdyi5";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "dev" = [ "blobby" ];
        };
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0zvyf13675hrlc37myj97k5ng7m1mj3d9p4ic4yvyhvl9zak0jpv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.2.5";
            features = [ "dev" ];
          }
        ];

      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "3.0.2";
        edition = "2015";
        sha256 = "0gvj7mycw62ik2p8l4fvk3m6sl2jzhsac3pciris89bcjimi49zn";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "avx2_backend" = [ "simd_backend" ];
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "subtle/nightly" ];
          "simd_backend" = [ "nightly" "u64_backend" "packed_simd" ];
          "std" = [ "alloc" "subtle/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "u64_backend" ];
      };
      "dashmap" = rec {
        crateName = "dashmap";
        version = "4.0.2";
        edition = "2018";
        sha256 = "1773x18k5m2zw1iyibs8l3wl1p1aijdbrc0w844xys06inr46yp7";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07w3vzrhxh9lpjgsg2y5bwzfar2aq35mdznvcp3zjl0ssj7d4mx3";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.8.2";
        edition = "2018";
        sha256 = "07k6m6igz02g2b1v7nims7vd8azwxrav43xl14a6rjmxnikcnvpj";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
        };
        resolvedDefaultFeatures = [ "atty" "termcolor" ];
      };
      "eyre" = rec {
        crateName = "eyre";
        version = "0.6.5";
        edition = "2018";
        sha256 = "0awxjsn1bwa43kwv1ycgn1qy9zs66syddjcidxfvz1pasp8kj4i2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Jane Lusby <jlusby42@gmail.com>"
        ];
        dependencies = [
          {
            name = "indenter";
            packageId = "indenter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "track-caller" ];
        };
        resolvedDefaultFeatures = [ "default" "track-caller" ];
      };
      "find-crate" = rec {
        crateName = "find-crate";
        version = "0.6.3";
        edition = "2018";
        sha256 = "1ljpkh11gj7940xwz47xjhsvfbl93c2q0ql7l2v0w77amjx8paar";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "toml";
            packageId = "toml";
          }
        ];

      };
      "fluent" = rec {
        crateName = "fluent";
        version = "0.15.0";
        edition = "2018";
        sha256 = "16k2grl0khdqax8chvp9ds1pkz4k3ckrzbschkj6c82y01172kdw";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "fluent-bundle";
            packageId = "fluent-bundle";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];

      };
      "fluent-bundle" = rec {
        crateName = "fluent-bundle";
        version = "0.15.1";
        edition = "2018";
        sha256 = "01x07xwva97vs258fhz3axf9dxb1ykxl2xb6ybdxjwj8xd709kwa";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "fluent-langneg";
            packageId = "fluent-langneg";
          }
          {
            name = "fluent-syntax";
            packageId = "fluent-syntax";
          }
          {
            name = "intl-memoizer";
            packageId = "intl-memoizer";
          }
          {
            name = "intl_pluralrules";
            packageId = "intl_pluralrules";
          }
          {
            name = "ouroboros";
            packageId = "ouroboros";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        devDependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = [ "macros" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "fluent-langneg" = rec {
        crateName = "fluent-langneg";
        version = "0.13.0";
        edition = "2018";
        sha256 = "152yxplc11vmxkslvmaqak9x86xnavnhdqyhrh38ym37jscd0jic";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        devDependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = [ "macros" ];
          }
        ];
        features = {
          "cldr" = [ "unic-langid/likelysubtags" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "fluent-syntax" = rec {
        crateName = "fluent-syntax";
        version = "0.11.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0y6ac7z7sbv51nsa6km5z8rkjj4nvqk91vlghq1ck5c3cjbyvay0";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
          "Staś Małolepszy <stas@mozilla.com>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "json" = [ "serde" "serde_json" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "funty" = rec {
        crateName = "funty";
        version = "1.1.0";
        edition = "2018";
        sha256 = "19wx3p3jmv863y0mjb56sr4qf1kvqhl3fsyslkd92zli0p8lrlzy";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.4";
        edition = "2015";
        sha256 = "05qqwm9v5asbil9z28wjkmpfvs1c5c99n8n9gwxis3d3r3n6c52h";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
        };
      };
      "getrandom 0.1.16" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "test-in-browser" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "getrandom 0.2.2" = rec {
        crateName = "getrandom";
        version = "0.2.2";
        edition = "2018";
        sha256 = "1j1jcwahnkn45kapq9i5nvw2s5hcfmp1zpjx0fzl0wcy4w2mfjf9";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.10.2+wasi-snapshot-preview1";
            target = { target, features }: (target."os" == "wasi");
          }
        ];
        features = {
          "js" = [ "wasm-bindgen" "js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.23.0";
        edition = "2018";
        sha256 = "1km657nwcrb0pnv7v0ldhgl9y8s889y2j9jckmws8k2i8bhkyl7n";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
        ];
        features = {
          "default" = [ "read" "write" "std" "fallible-iterator" "endian-reader" ];
          "endian-reader" = [ "stable_deref_trait" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" ];
          "std" = [ "fallible-iterator/std" "stable_deref_trait/std" ];
          "write" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" ];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0x25wfr7vg3mzxc9x05dcphvd3nwlcmbnxrvwcvrrdwplcrrk4cv";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.9.1";
        edition = "2018";
        sha256 = "016dsm9s4xmxlkw2jfikm54qlz6vyk0qr280gab7kzp342jf9byp";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "default" = [ "ahash" "inline-more" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1b56s2c1ymdd0qmy31bw0ndhm31hcdamnhg3npp7ssrmc1ag9jw7";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.1.18";
        edition = "2018";
        sha256 = "0p6czgbk1izviwxzm6ypy3vz2wqj1yd3ab03wp82xqjng7klsbrj";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hkdf" = rec {
        crateName = "hkdf";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0sw8bz79xqq3bc5dh6nzv084g7va13j3lrqf91c10a2wimbnsw01";
        libPath = "src/hkdf.rs";
        authors = [
          "vladikoff"
          "warner"
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "hmac";
            packageId = "hmac";
          }
        ];
        features = {
        };
      };
      "hmac" = rec {
        crateName = "hmac";
        version = "0.11.0";
        edition = "2018";
        sha256 = "16z61aibdg4di40sqi4ks2s4rz6r29w4sx4gvblfph3yxch26aia";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "crypto-mac/std" ];
        };
      };
      "i18n-config" = rec {
        crateName = "i18n-config";
        version = "0.4.2";
        edition = "2018";
        sha256 = "10yr0k8vy2s60yzajn659yscb3ch0ya6ywyqrgrm3yxb8g6zyamn";
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "toml";
            packageId = "toml";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = [ "serde" ];
          }
        ];

      };
      "i18n-embed" = rec {
        crateName = "i18n-embed";
        version = "0.12.0";
        edition = "2018";
        sha256 = "1q3rma2yjpr38n7i7grin9mibdj1i181d1sggn515d75hvmnq53n";
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "fluent";
            packageId = "fluent";
            optional = true;
          }
          {
            name = "fluent-langneg";
            packageId = "fluent-langneg";
          }
          {
            name = "fluent-syntax";
            packageId = "fluent-syntax";
            optional = true;
          }
          {
            name = "i18n-embed-impl";
            packageId = "i18n-embed-impl";
            optional = true;
          }
          {
            name = "intl-memoizer";
            packageId = "intl-memoizer";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "rust-embed";
            packageId = "rust-embed";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
            optional = true;
          }
        ];
        features = {
          "default" = [ "rust-embed" ];
          "desktop-requester" = [ "locale_config" ];
          "filesystem-assets" = [ "walkdir" ];
          "fluent-system" = [ "fluent" "fluent-syntax" "parking_lot" "i18n-embed-impl" "i18n-embed-impl/fluent-system" ];
          "gettext-system" = [ "tr" "tr/gettext" "gettext_system" "parking_lot" "i18n-embed-impl" "i18n-embed-impl/gettext-system" ];
          "web-sys-requester" = [ "web-sys" ];
        };
        resolvedDefaultFeatures = [ "default" "filesystem-assets" "fluent" "fluent-syntax" "fluent-system" "i18n-embed-impl" "parking_lot" "rust-embed" "walkdir" ];
      };
      "i18n-embed-fl" = rec {
        crateName = "i18n-embed-fl";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1lh2y6jl4fw28115sbk2ay8dbg85rpw1ny0699i1kg6h3faz94ad";
        procMacro = true;
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "find-crate";
            packageId = "find-crate";
          }
          {
            name = "fluent";
            packageId = "fluent";
          }
          {
            name = "fluent-syntax";
            packageId = "fluent-syntax";
          }
          {
            name = "i18n-config";
            packageId = "i18n-config";
          }
          {
            name = "i18n-embed";
            packageId = "i18n-embed";
            features = [ "fluent-system" "filesystem-assets" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "proc-macro" "parsing" "printing" "extra-traits" ];
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];

      };
      "i18n-embed-impl" = rec {
        crateName = "i18n-embed-impl";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0lzb41fp59m86vrv98akdq579i3g31856yc6kq0blzyl3mnswmr7";
        procMacro = true;
        authors = [
          "Luke Frisken <l.frisken@gmail.com>"
        ];
        dependencies = [
          {
            name = "find-crate";
            packageId = "find-crate";
            optional = true;
          }
          {
            name = "i18n-config";
            packageId = "i18n-config";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "proc-macro" "parsing" "printing" "extra-traits" ];
          }
        ];
        features = {
          "fluent-system" = [ "i18n-config" "find-crate" "quote" ];
          "gettext-system" = [ "i18n-config" "find-crate" "quote" ];
        };
        resolvedDefaultFeatures = [ "default" "find-crate" "fluent-system" "i18n-config" "quote" ];
      };
      "indenter" = rec {
        crateName = "indenter";
        version = "0.3.2";
        edition = "2018";
        sha256 = "1j0yjygkiy4wxvdw9jkspf4qfrfjia425p7sw1zjpv2g24pfpmgl";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];

      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "1.6.1";
        edition = "2018";
        sha256 = "0friqyzr4ssyayks7nirqbc36zcsf8fdi67jmvl4vpjh8a9zmcag";
        authors = [
          "bluss"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "serde-1" = [ "serde" ];
        };
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.9";
        edition = "2018";
        sha256 = "1v659qqm55misvjijfbl1p7azjp4yynjbwldan8836ynpgp4w4k1";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "now" = [ "time" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
        };
      };
      "intl-memoizer" = rec {
        crateName = "intl-memoizer";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0vx6cji8ifw77zrgipwmvy1i3v43dcm58hwjxpb1h29i98z46463";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "type-map";
            packageId = "type-map";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];

      };
      "intl_pluralrules" = rec {
        crateName = "intl_pluralrules";
        version = "7.0.1";
        edition = "2018";
        sha256 = "1ksy3hxqs8if3nbvcin0a8390lpkzbk2br1brik70z96hj1ri3xi";
        authors = [
          "Kekoa Riggin <kekoariggin@gmail.com>"
          "Zibi Braniecki <zbraniecki@mozilla.com>"
        ];
        dependencies = [
          {
            name = "tinystr";
            packageId = "tinystr";
          }
          {
            name = "unic-langid";
            packageId = "unic-langid";
          }
        ];
        devDependencies = [
          {
            name = "unic-langid";
            packageId = "unic-langid";
            features = [ "macros" ];
          }
        ];

      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.4.0";
        edition = "2015";
        sha256 = "0in6ikhw8mgl33wjv6q6xfrb5b9jr16q8ygjy803fay4zcisvaz2";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin";
            optional = true;
          }
        ];
        features = {
          "spin_no_std" = [ "spin" ];
        };
        resolvedDefaultFeatures = [ "spin" "spin_no_std" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.84";
        edition = "2015";
        sha256 = "1zy5z0yc10ninwhvb7hv1z0vbwmqav1lsljrjjcc1s4207x35jhw";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0akh56sh51adhagmk9l84dyrlz60gv8ri05xhr13i1b18czkpmy7";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "musl-reference-tests" = [ "rand" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.2";
        edition = "2018";
        sha256 = "04hkhfq308agxg9wwmzh7ncfiyyyhn0d49n07abppzdj6p8zz5nx";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.14";
        edition = "2015";
        sha256 = "04175hv0v62shd82qydq58a48k3bjijmk54v38zgqlbxqkkbpfai";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "kv_unstable" = [ "value-bag" ];
          "kv_unstable_serde" = [ "kv_unstable_std" "value-bag/serde" "serde" ];
          "kv_unstable_std" = [ "std" "kv_unstable" "value-bag/error" ];
          "kv_unstable_sval" = [ "kv_unstable" "value-bag/sval" "sval" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.3.4";
        edition = "2015";
        sha256 = "098m9clfs495illlw00hv2gg67mhm7jflld3msyclvi5m9xc9q8f";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "use_std" = [ "std" ];
        };
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.4.3";
        edition = "2018";
        sha256 = "17d1xp29v5xgh4vahxld14w1c1hgh38qmxpv7i18wy096gn2cb8g";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler";
            packageId = "adler";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler/rustc-dep-of-std" ];
        };
      };
      "nom" = rec {
        crateName = "nom";
        version = "6.1.0";
        edition = "2018";
        sha256 = "1cg27ijcxq2f56zsd3kdh0kzqz8jf3ab6yqw1wqal9b3dns70vxb";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "alloc" = [ "bitvec/alloc" ];
          "default" = [ "std" "bitvec" "lexical" ];
          "lexical" = [ "lexical-core" ];
          "regexp" = [ "regex" ];
          "std" = [ "alloc" "bitvec/std" "memchr/use_std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bitvec" ];
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.2.6";
        edition = "2015";
        sha256 = "015k3wixdi4w698sappvy43pf8bvkw0f88xplmdgc3zfk2cpy309";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-bigint-dig" = rec {
        crateName = "num-bigint-dig";
        version = "0.6.1";
        edition = "2015";
        sha256 = "0ykzpl4w4rnka2il03krwmibimakdrvvaqn9ncafyljgf1nm8lax";
        authors = [
          "dignifiedquire <dignifiedquire@gmail.com>"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            usesDefaultFeatures = false;
            features = [ "spin_no_std" ];
          }
          {
            name = "libm";
            packageId = "libm";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 0.1.7";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.7.3";
            features = [ "small_rng" ];
          }
        ];
        features = {
          "default" = [ "std" "i128" "u64_digit" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "prime" = [ "rand" ];
          "std" = [ "num-integer/std" "num-traits/std" "smallvec/write" "rand/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "prime" "rand" "serde" "std" "u64_digit" "zeroize" ];
      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.44";
        edition = "2015";
        sha256 = "1nq152y3304as1iai95hqz8prqnc94lks1s7q05sfjdmcf56kk6j";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.42";
        edition = "2015";
        sha256 = "0ndd9wb9qar50fdr16xm3i1zk6h2g9br56nml2n22kd56y1iq0mj";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.14";
        edition = "2015";
        sha256 = "144j176s2p76azy2ngk2vkdzgwdc0bc8c93jhki8c9fsbknb2r4s";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg 1.0.1";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.13.0";
        edition = "2015";
        sha256 = "1cv6yxhz2zbnwn8pn1yn8grg7zsnd523947fby41a737aqvryj85";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: (((target."arch" == "x86_64") || (target."arch" == "aarch64")) && (target."os" == "hermit"));
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "object" = rec {
        crateName = "object";
        version = "0.23.0";
        edition = "2018";
        sha256 = "1m658q2ci9hk8csbl17zwcg1hpvcxm2sspjb9bzg0kc1cifsp9x9";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "Philip Craig <philipjcraig@gmail.com>"
        ];
        features = {
          "all" = [ "read" "write" "std" "compression" "default" ];
          "compression" = [ "flate2" "std" ];
          "default" = [ "read" "compression" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "wasm" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" ];
          "wasm" = [ "wasmparser" ];
          "write" = [ "write_core" "coff" "elf" "macho" ];
          "write_core" = [ "crc32fast" "indexmap" "std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.5.2";
        edition = "2018";
        sha256 = "183zs1dbmsv24mkafjypf9qwjrx46an58vb004a162l113sl3g8k";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1m8kzi4nd6shdqimn0mgb24f0hxslhnqd1whakyq06wcqd086jk2";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "os_str_bytes" = rec {
        crateName = "os_str_bytes";
        version = "2.4.0";
        edition = "2018";
        sha256 = "11agh8n3x2l4sr3sxvx6byc1j3ryb1g6flb1ywn0qhq7xv1y3cmg";
        authors = [
          "dylni"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "ouroboros" = rec {
        crateName = "ouroboros";
        version = "0.9.3";
        edition = "2018";
        sha256 = "05fd67rj4g67iyv94bgvv4kw8mk5x3vj0360nvp4xb411cq547yc";
        authors = [
          "Joshua Maros <joshua-maros@github.com>"
        ];
        dependencies = [
          {
            name = "ouroboros_macro";
            packageId = "ouroboros_macro";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
          }
        ];

      };
      "ouroboros_macro" = rec {
        crateName = "ouroboros_macro";
        version = "0.9.3";
        edition = "2018";
        sha256 = "0mdhd9bg88gx9cv2qiav8r2z4jyf1j8cfcxlf9xds73kz3405ns1";
        procMacro = true;
        authors = [
          "Joshua Maros <joshua-maros@github.com>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro-error";
            packageId = "proc-macro-error";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];

      };
      "owo-colors" = rec {
        crateName = "owo-colors";
        version = "1.3.0";
        edition = "2018";
        sha256 = "0mbs3z0c6p48wh96paa230xf6c6h8nhyyk1d118pybqwx7mv91i3";
        authors = [
          "jam1garner <8260240+jam1garner@users.noreply.github.com>"
        ];
        features = {
          "tty" = [ "atty" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.11.1";
        edition = "2018";
        sha256 = "1sqmgaia8zfd5fbnqw2w13ijh7crk3lf9vw4cb52vwlx0an48xvd";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
          "stdweb" = [ "instant/stdweb" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.8.2";
        edition = "2018";
        sha256 = "0wj2lf5g5fnhrdrg02rdfllpwq0zisnn0b2388a8b12gmn665jww";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.1.57";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "ntstatus" "minwindef" "winerror" "winbase" "errhandlingapi" "handleapi" ];
          }
        ];
        features = {
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
        };
      };
      "pbkdf2" = rec {
        crateName = "pbkdf2";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1ykgicvyjm41701mzqhrfmiz5sm5y0zwfg6csaapaqaf49a54pyr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
        ];
        features = {
          "default" = [ "simple" ];
          "parallel" = [ "rayon" "std" ];
          "simple" = [ "sha2" "hmac" "password-hash" "base64ct" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "pem" = rec {
        crateName = "pem";
        version = "0.8.2";
        edition = "2018";
        sha256 = "1iphvl566j93gggbqdq6pz3afr0yx38mj8x8dkci6gc63z821hpl";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.1.0";
        edition = "2015";
        sha256 = "0bp3zrsk3kr47fbpipyczidbbx4g54lzxdm77ni1i3qws10mdzfl";
        libPath = "lib.rs";
        authors = [
          "The rust-url developers"
        ];

      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1wm2gjmgcsglw8yqka67fhvcj7zj1fh6yfw6awlal5wza1l0pdwm";
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
            usesDefaultFeatures = false;
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0wcy3n9w856aw27f6ns2ipd2yac7jbl0n3pmn0cyhb7jjdimm8na";
        procMacro = true;
        authors = [
          "Taiki Endo <te316e89@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "pinentry" = rec {
        crateName = "pinentry";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0899l6d0jx8rmrmpxf6mhj9x4bvfvcnyggq07mpz23n4fxp6l9m8";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "secrecy";
            packageId = "secrecy";
          }
          {
            name = "which";
            packageId = "which";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];

      };
      "poly1305" = rec {
        crateName = "poly1305";
        version = "0.6.2";
        edition = "2018";
        sha256 = "1a7w61pzwiylxc1ic34rpw8sz3f4596bw5m0nf1czm6j3ay5cx2b";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpuid-bool";
            packageId = "cpuid-bool 0.2.0";
            target = { target, features }: ((target."arch" == "x86_64") || (target."arch" == "x86"));
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.10";
        edition = "2018";
        sha256 = "0ms8198kclg4h96ggbziixxmsdl847s648kmbx11zlmjsqjccx5c";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "proc-macro-error" = rec {
        crateName = "proc-macro-error";
        version = "1.0.4";
        edition = "2018";
        sha256 = "1373bhxaf0pagd8zkyd03kkx6bchzf6g0dkwrwzsnal9z47lj9fs";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr";
            packageId = "proc-macro-error-attr";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn" "syn-error" ];
      };
      "proc-macro-error-attr" = rec {
        crateName = "proc-macro-error-attr";
        version = "1.0.4";
        edition = "2018";
        sha256 = "0sgq6m5jfmasmwwy8x4mjygx5l7kp8s4j60bv25ckv2j1qc41gm1";
        procMacro = true;
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.24";
        edition = "2018";
        sha256 = "0wcabxzrddcjmryndw8fpyxcq6rw63m701vx86xxf03y3bp081qy";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.8";
        edition = "2018";
        sha256 = "1pr8dz4pyfbbsqpqw6ygin8m4sz61iir7nl23233cgwsa71k254r";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "radium" = rec {
        crateName = "radium";
        version = "0.5.3";
        edition = "2018";
        sha256 = "1f5vj5zy4kcsw8p87y976dm5pln6v6jfw5f0fkj7qbwfipbsj6wl";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc 0.2.0";
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc 0.2.0";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "nightly" = [ "simd_support" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand 0.8.3" = rec {
        crateName = "rand";
        version = "0.8.3";
        edition = "2018";
        sha256 = "0zldxfx4gi551n2fna4zz9ab22zsnzw1mj5hzi5nfs24dgkfgy8f";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.0";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!(target."os" == "emscripten"));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.2";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc 0.3.0";
            optional = true;
            target = { target, features }: (target."os" == "emscripten");
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc 0.3.0";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "serde1" = [ "serde" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" "rand_hc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "rand_hc" "std" "std_rng" ];
      };
      "rand_chacha 0.2.2" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.3.0" = rec {
        crateName = "rand_chacha";
        version = "0.3.0";
        edition = "2018";
        sha256 = "03df2xh5nbdvwr17qm3sviaxa95r8yhm1nil2pr0pqf90p7ka9z1";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.2";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.6.2" = rec {
        crateName = "rand_core";
        version = "0.6.2";
        edition = "2018";
        sha256 = "1rvas1afjvd2827b8mf2ilg78h3ksl9npkrdds3wbw9x33mndkrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.2";
            optional = true;
          }
        ];
        features = {
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc 0.2.0" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];

      };
      "rand_hc 0.3.0" = rec {
        crateName = "rand_hc";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0wra6ar22zdjkry9dsq1mg620m4h3qb9s8rfykkz4im4crqfz41i";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.2";
          }
        ];

      };
      "redox_syscall 0.1.57" = rec {
        crateName = "redox_syscall";
        version = "0.1.57";
        edition = "2015";
        sha256 = "1kh59fpwy33w9nwd5iyc283yglq8pf2s41hnhvl48iax9mz0zk21";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];

      };
      "redox_syscall 0.2.4" = rec {
        crateName = "redox_syscall";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0w254gyccyinrzhgd562ddrhgcpwswy700mmc9qa6pkc86lqrv05";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];

      };
      "regex" = rec {
        crateName = "regex";
        version = "1.4.3";
        edition = "2015";
        sha256 = "12llbg82js69mdl50lav4yn1iqlx71ckb18dww467q99w4wi49fr";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-inline" "perf-literal" ];
          "perf-cache" = [ "thread_local" ];
          "perf-literal" = [ "aho-corasick" "memchr" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.6.22";
        edition = "2015";
        sha256 = "10b56ylil35jkb4nwqxm8hbyx3zq7fws0wpydjln165s8xql3sxm";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
      };
      "remove_dir_all" = rec {
        crateName = "remove_dir_all";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1rzqbsgkmr053bxxl04vmvsd1njyz0nxvly97aip6aa2cmb15k9s";
        authors = [
          "Aaronepower <theaaronepower@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "errhandlingapi" "winerror" "fileapi" "winbase" ];
          }
        ];

      };
      "rpassword" = rec {
        crateName = "rpassword";
        version = "5.0.1";
        edition = "2015";
        sha256 = "1yry1kmgjcb4qd5wak91203493x42ak3dz9hy1c0r9kyib7kdjgz";
        authors = [
          "Conrad Kleinespel <conradk@conradk.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "winnt" "fileapi" "processenv" "winbase" "handleapi" "consoleapi" "minwindef" "wincon" ];
          }
        ];

      };
      "rsa" = rec {
        crateName = "rsa";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1kgrnb57mcgr4x653qqbkdk3m5bv98l5w41cjwcapzhan5lvcj1n";
        authors = [
          "RustCrypto Developers"
          "dignifiedquire <dignifiedquire@gmail.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "digest";
            packageId = "digest";
            features = [ "std" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "num-bigint-dig";
            packageId = "num-bigint-dig";
            rename = "num-bigint";
            features = [ "rand" "i128" "u64_digit" "prime" "zeroize" ];
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-iter";
            packageId = "num-iter";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "pem";
            packageId = "pem";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "simple_asn1";
            packageId = "simple_asn1";
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "alloc" "zeroize_derive" ];
          }
        ];
        devDependencies = [
          {
            name = "pem";
            packageId = "pem";
          }
        ];
        features = {
          "default" = [ "pem" ];
          "nightly" = [ "subtle/nightly" "num-bigint/nightly" ];
          "serde" = [ "num-bigint/serde" "serde_crate" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "pem" ];
      };
      "rust-embed" = rec {
        crateName = "rust-embed";
        version = "5.9.0";
        edition = "2018";
        sha256 = "08smnqn21vn5zaywfki391v2l9v30cs0446qzzhvjssxmimgxq9g";
        authors = [
          "pyros2097 <pyros2097@gmail.com>"
        ];
        dependencies = [
          {
            name = "rust-embed-impl";
            packageId = "rust-embed-impl";
          }
          {
            name = "rust-embed-utils";
            packageId = "rust-embed-utils";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "actix" = [ "actix-web" "mime_guess" ];
          "compression" = [ "rust-embed-impl/compression" "include-flate" ];
          "debug-embed" = [ "rust-embed-impl/debug-embed" "rust-embed-utils/debug-embed" ];
          "interpolate-folder-path" = [ "rust-embed-impl/interpolate-folder-path" ];
          "nightly" = [ "rocket" ];
          "warp-ex" = [ "warp" "tokio" "mime_guess" ];
        };
      };
      "rust-embed-impl" = rec {
        crateName = "rust-embed-impl";
        version = "5.9.0";
        edition = "2018";
        sha256 = "0rlykmykrpllkf4900wv2jfdmq3m5qqrqhw4fdlbzxrfqi0irn9y";
        procMacro = true;
        authors = [
          "pyros2097 <pyros2097@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rust-embed-utils";
            packageId = "rust-embed-utils";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "interpolate-folder-path" = [ "shellexpand" ];
        };
      };
      "rust-embed-utils" = rec {
        crateName = "rust-embed-utils";
        version = "5.1.0";
        edition = "2018";
        sha256 = "0vc7492a6qlq7r899p7vyx5cwiqwkw2pf85mfw5anwr42ccj4l9a";
        authors = [
          "pyros2097 <pyros2097@gmail.com>"
        ];
        dependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
        };
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.18";
        edition = "2015";
        sha256 = "0cn2hdq0glr875hvpi0hvb19xj3y9gfnk0lnsw3wl538wc7asfvf";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "salsa20" = rec {
        crateName = "salsa20";
        version = "0.8.0";
        edition = "2018";
        sha256 = "0ykqc3zyh4qp8zx4kr9a3j6wb33cyhz3zd51w53skssbhq85yz0w";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.3.0";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher 0.3.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "xsalsa20" ];
          "hsalsa20" = [ "xsalsa20" ];
        };
        resolvedDefaultFeatures = [ "expose-core" ];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1kbqm85v43rq92vx7hfiay6pmcga03vrjbbfwqpyj3pwsg3b16nj";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "scrypt" = rec {
        crateName = "scrypt";
        version = "0.7.0";
        edition = "2018";
        sha256 = "0605xafx9x914ca4wx0f7vml1lpxzvzj0zjl08ryf1h9z7c8i5c7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
            usesDefaultFeatures = false;
          }
          {
            name = "salsa20";
            packageId = "salsa20";
            usesDefaultFeatures = false;
            features = [ "expose-core" ];
          }
          {
            name = "sha2";
            packageId = "sha2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "simple" "std" ];
          "simple" = [ "password-hash" "base64ct" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "secrecy" = rec {
        crateName = "secrecy";
        version = "0.7.0";
        edition = "2018";
        sha256 = "1h4p8ppvxi73apa3w0jk94xazqk3jgyj9x6al497splz8jkdcwq6";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.123";
        edition = "2015";
        sha256 = "1bk9733mgiv5sg8yb19y8mc85fb2aaqp1k02v10alavj688idmcj";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.123";
        edition = "2015";
        sha256 = "0ccg4m7ww6mfs5vjdbdifri2kf1wyd4difjnqnraph2gssaw54ck";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.9.2";
        edition = "2018";
        sha256 = "1a225akwq8k1ym827f8f72rfgxaf7zdnnq07qpcblj91zs3anykf";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpuid-bool";
            packageId = "cpuid-bool 0.1.2";
            target = { target, features }: ((target."arch" == "x86") || (target."arch" == "x86_64"));
          }
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" "libc" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "simple_asn1" = rec {
        crateName = "simple_asn1";
        version = "0.4.1";
        edition = "2015";
        sha256 = "0jxy9as8nj65c2n27j843g4fpb95x4fjz31w6qx63q3wwlys2b39";
        authors = [
          "Adam Wick <awick@uhsure.com>"
        ];
        dependencies = [
          {
            name = "chrono";
            packageId = "chrono";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.6.1";
        edition = "2018";
        sha256 = "0kk08axr0ybfbjzk65a41k84mb6sfhyajmfndaka9igkx34kf3zy";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "write" ];
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.5.2";
        edition = "2015";
        sha256 = "0b84m6dbzrwf2kxylnw82d3dr8w06av7rfkr8s85fb5f43rwyqvf";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
        ];

      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.10.0";
        edition = "2015";
        sha256 = "08s69r4rcrahwnickvi0kq49z524ci50capybln83mg6b473qivk";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
        ];

      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.4.0";
        edition = "2015";
        sha256 = "1hipji54nipkya6szyk9kl7nz07qli570b1isklz78dda44dm08y";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "syn" = rec {
        crateName = "syn";
        version = "1.0.60";
        edition = "2018";
        sha256 = "1080gw6mlja7yl26crya3k403wjdp7v3wx9mxcmpcnlar9z5j067";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" "visit-mut" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.12.4";
        edition = "2018";
        sha256 = "00c72ij813xsilssgya6m6f73d0s5zzsld1y26bvhk3kdzbg4d5q";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "tap" = rec {
        crateName = "tap";
        version = "1.0.0";
        edition = "2015";
        sha256 = "13h7rw3zg3qyb4wrri8l6xbd1wrxd2rq29sqxnkd7zqs5mrlwirn";
        authors = [
          "Elliott Linder <elliott.darfink@gmail.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.2.0";
        edition = "2018";
        sha256 = "08pbf3c1i42382dc44dil5bgiawcsi0qk6zdibw10f69rxiwdhfs";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <jasonaw0@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand";
            packageId = "rand 0.8.3";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.2.4";
            target = { target, features }: (target."os" == "redox");
          }
          {
            name = "remove_dir_all";
            packageId = "remove_dir_all";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "fileapi" "handleapi" "winbase" ];
          }
        ];

      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1x65i1ny4m6z1by62ra6wdcrd557p2ysm866x0pg60zby2cxizid";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "terminal_size" = rec {
        crateName = "terminal_size";
        version = "0.1.16";
        edition = "2018";
        sha256 = "01i4zlv8dplx8ps328wl14xv7w1ah0ni6i3g0w1dnd07fpnqrjl6";
        authors = [
          "Andrew Chin <achin@eminence32.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "handleapi" "processenv" "winbase" "wincon" "winnt" ];
          }
        ];

      };
      "textwrap" = rec {
        crateName = "textwrap";
        version = "0.12.1";
        edition = "2018";
        sha256 = "12978qmkl5gcp94lxndpvp9qxq8mxp7hm9xbrw3422dgikchhc10";
        authors = [
          "Martin Geisler <martin@geisler.net>"
        ];
        dependencies = [
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.23";
        edition = "2018";
        sha256 = "0imiv97kdlba0r0ld6mlizfmw5rpmfzhvk7xw8l8k35zd9n63k3n";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.23";
        edition = "2018";
        sha256 = "1law4wqpc36hxs4vcgc1pjjniy4l6xn7kwvf0k886xf2mqn3mrwv";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "time" = rec {
        crateName = "time";
        version = "0.1.43";
        edition = "2015";
        sha256 = "0f14wrgxj7ya2v4msg5mni7046bsm2angm7cn3pd3yv04gpm12na";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "minwinbase" "minwindef" "ntdef" "profileapi" "sysinfoapi" "timezoneapi" ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "std" "processthreadsapi" "winbase" ];
          }
        ];

      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.3.4";
        edition = "2018";
        sha256 = "1hf74r8qiigddfsxsbkab1pz1hsgi2297azf42k9x39qnknqwwr9";
        authors = [
          "Raph Levien <raph.levien@gmail.com>"
          "Zibi Braniecki <zibi@braniecki.net>"
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "tinystr-macros" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.8";
        edition = "2018";
        sha256 = "1apcmjrrjw429pjw7mqlmdwwd67g8305vwqy4kw3swr612bl44d3";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "type-map" = rec {
        crateName = "type-map";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0ilsqq7pcl3k9ggxv2x5fbxxfd6x7ljsndrhc38jmjwnbr63dlxn";
        authors = [
          "Jacob Brown <kardeiz@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.12.0";
        edition = "2015";
        sha256 = "0cvbksljz61ian21fnn0h51kphl0pwpzb932bv4s0rwy1wh8lg1p";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
        };
      };
      "unic-langid" = rec {
        crateName = "unic-langid";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1rcw8llr3a120qad7rlbv4fb19l744ckxwnx37dhn0qafg6qyckk";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "unic-langid-impl";
            packageId = "unic-langid-impl";
          }
        ];
        features = {
          "likelysubtags" = [ "unic-langid-impl/likelysubtags" ];
          "macros" = [ "unic-langid-macros" ];
          "serde" = [ "unic-langid-impl/serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" ];
      };
      "unic-langid-impl" = rec {
        crateName = "unic-langid-impl";
        version = "0.9.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0kck3fpdvqv5nha47xkna3zsr8ik9hpyr5ac830n4j29y3m8wjhs";
        authors = [
          "Zibi Braniecki <gandalf@mozilla.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "binary" = [ "serde" "serde_json" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.7.1";
        edition = "2015";
        sha256 = "15n736z0pbj30pj44jb9s9rjavzrmx8v8pzdgsl5yfmfwrxjw3dv";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.8";
        edition = "2015";
        sha256 = "1qxizyi6xbcqyi4z79p523ywvmgsfcgfqb3zv3c8i6x1jcc5jdwk";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "rustc-dep-of-std" = [ "std" "core" "compiler_builtins" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0r6mknipyy9vpz8mwmxvkx65ff2ha1n2pxqjj6f46lcn8yrhpzpp";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "universal-hash" = rec {
        crateName = "universal-hash";
        version = "0.4.0";
        edition = "2018";
        sha256 = "00hljq64l0p68yrncvyww4cdgkzpzl49vrlnj57kwblkak3b49l3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        features = {
          "eders" = [ "serde" ];
        };
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.2";
        edition = "2015";
        sha256 = "1vbaqdf802qinsq8q20w8w0qn2pv0rkq5p73ijcblrwxcvjp5adm";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0z9g39f49cycdm9vzjf8hnfh3f1csxgd65kmlphj8r2vffy84wbp";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "winnt" ];
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasi 0.10.2+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.10.2+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "1ii7nff4y1mpcrxzzvbpgxm7a1nn3szjf1n21jnx37c2g6dbsvzx";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "which" = rec {
        crateName = "which";
        version = "4.0.2";
        edition = "2015";
        sha256 = "1vqih4glz0kh3p08bl8mdzk4c02195ws7v6mfpyfrf5qw7vlxhc7";
        authors = [
          "Harry Fei <tiziyuanfang@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];

      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (stdenv.hostPlatform.config == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "minwinbase" "minwindef" "ntdef" "ntstatus" "processenv" "profileapi" "std" "sysinfoapi" "timezoneapi" "winbase" "wincon" "winerror" "winnt" "winuser" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0y71bp7f6d536czj40dhqk0d55wfbbwqfp2ymqf1an5ibgl6rv3h";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "std" "consoleapi" "errhandlingapi" "fileapi" "minwindef" "processenv" "winbase" "wincon" "winerror" "winnt" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "wyz" = rec {
        crateName = "wyz";
        version = "0.2.0";
        edition = "2018";
        sha256 = "05028bk49b2ix1lz22sj65fnlxr0f29j2klkaqjxp6az3c6hprl5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "x25519-dalek" = rec {
        crateName = "x25519-dalek";
        version = "1.1.0";
        edition = "2018";
        sha256 = "127h77j1796cmnhdixachimj92z5xl3j2vdn471szmwz6nalsqdw";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "DebugSteven <debugsteven@gmail.com>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "default" = [ "std" "u64_backend" ];
          "nightly" = [ "curve25519-dalek/nightly" ];
          "serde" = [ "our_serde" "curve25519-dalek/serde" ];
          "std" = [ "curve25519-dalek/std" ];
          "u32_backend" = [ "curve25519-dalek/u32_backend" ];
          "u64_backend" = [ "curve25519-dalek/u64_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "u64_backend" ];
      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.2.0";
        edition = "2018";
        sha256 = "0dhwwh63cnishw5jvvf9li2lscin6jq7srs19p50szrmvny79ac1";
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.0.1";
        edition = "2018";
        sha256 = "05jx6j2c078f41ik0xgc5lb0z7yjfhgg76x43akanql8n7fnkwy3";
        procMacro = true;
        authors = [
          "Tony Arcieri <tony@iqlusion.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
     This corresponds roughly to what buildRustCrate is setting.
  */
  defaultTarget = {
    unix = true;
    windows = false;
    fuchsia = true;
    test = false;

    # This doesn't appear to be officially documented anywhere yet.
    # See https://github.com/rust-lang-nursery/rust-forge/issues/101.
    os =
      if stdenv.hostPlatform.isDarwin
      then "macos"
      else stdenv.hostPlatform.parsed.kernel.name;
    arch = stdenv.hostPlatform.parsed.cpu.name;
    family = "unix";
    env = "gnu";
    endian =
      if stdenv.hostPlatform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString stdenv.hostPlatform.parsed.cpu.bits;
    vendor = stdenv.hostPlatform.parsed.vendor.name;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
     of crate given as the second argument.

     testCrateFlags: list of flags to pass to the test exectuable
     testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -ex

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          ${pkgs.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            $f $testCrateFlags 2>&1 | tee -a $out
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      } ''
      echo tested by ${test}
      ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
    '';

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
     for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , target ? defaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = target // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            filterEnabledDependenciesForThis = dependencies: filterEnabledDependencies {
              inherit dependencies features target;
            };
            dependenciesWithRenames =
              lib.filter (d: d ? "rename")
                (
                  filterEnabledDependenciesForThis
                    (
                      (crateConfig.buildDependencies or [ ])
                      ++ (crateConfig.dependencies or [ ])
                      ++ devDependencies
                    )
                );
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; version = package.version; };
              in
              lib.mapAttrs (name: choices: builtins.map versionAndRename choices) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
     be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: v: sanitizeForJson v) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? defaultTarget }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
     features.

     This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

     If multiple paths to a dependency enable different features, the
     corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        depWithResolvedFeatures = dependency:
          let
            packageId = dependency.packageId;
            features = dependencyFeatures expandedFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = expandedFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ expandedFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = { name, rename ? null, ... }: feature:
    let
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    (rename == null && feature == name)
    || (rename != null && rename == feature)
    || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
     rules in featureMap.

     featureMap is an attribute set which maps feature names to lists of further
     feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeature = feature:
        assert (builtins.isString feature);
        [ feature ] ++ (expandFeatures featureMap (featureMap."${feature}" or [ ]));
      outFeatures = lib.concatMap expandFeature inputFeatures;
    in
    sortedUnique outFeatures;

  /*
     Returns the actual features for the given dependency.

     features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          dependencyPrefix = (dependency.rename or dependency.name) + "/";
          dependencyFeatures =
            builtins.filter (f: lib.hasPrefix dependencyPrefix f) features;
        in
        builtins.map (lib.removePrefix dependencyPrefix) dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #

  };
}